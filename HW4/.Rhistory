knitr::opts_chunk$set(echo = TRUE)
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#setting working directory
setwd("/Users/muhtasim/Desktop/STAT530/HWs/HW4")
#reading the "cleaned" HW3 data
mydata=read.csv("HW3.csv",header=TRUE)
#fit the regression model using unweighted/ordinary least squares (OLS)
fit = lm(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata)
#find the residuals
r=resid(fit)
#take the square of the residuals
esq=r*r
#regress squared residuals on the relevant predictors
efit=lm(esq ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata)
#find the predicted values from the above regression
p=predict(efit)
#use the predicted values to estimate the weight function
w=1/abs(p)
#now fit the regression model for weighted least square (WLS) using the weight w
fit2=lm(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, weight=w)
#iteration 1 ends
#iteration 2
r1=resid(fit2)
esq1=r1*r1
efit1=lm(esq1 ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata)
p1=predict(efit1)
w1=1/abs(p1)
fit3=lm(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, weight=w1)
#find coefficient for OLS regression
coef(fit)
#find coefficient for WLS regression for iteration 1
coef(fit2)
#find coefficient for WLS regression for iteration 2
coef(fit3)
#robust regression (M with Huber weights)
#rlm function fits a linear model by robust regression using an M estimator
#fitting is done by iterated re-weighted least squares (IRLS).
library(MASS)
fit_robust = rlm(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates
+ Calcium + gender, data = mydata, method = c("M"), psi = psi.huber)
r = rstudent(fit_robust)
absr = abs(r)
hweights = data.frame(residuals= fit_robust$residuals, stud_resids = r,
abs_stdres = absr, huber_weights = fit_robust$w)
hweights2 = hweights[order(fit_robust$w), ]
hweights2[1:20, ]
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#other data output method
library(broom)
td = tidy(ridgereg)
head(td)
g = glance(ridgereg)
g
#fancy plotting
library(ggplot2)
#plot of the estimates
ggplot(td, aes(lambda, estimate, color = term)) + geom_line()
# plot of GCV versus lambda
ggplot(td, aes(lambda, GCV)) + geom_line() +
geom_vline(xintercept = g$lambdaGCV, col = "red", lty = 2)
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#other data output method
library(broom)
g = glance(ridgereg)
g
#fancy plotting
library(ggplot2)
#plot of the estimates
ggplot(td, aes(lambda, estimate, color = term)) + geom_line()
# plot of GCV versus lambda
ggplot(td, aes(lambda, GCV)) + geom_line() +
geom_vline(xintercept = g$lambdaGCV, col = "red", lty = 2)
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#fancy plotting
library(ggplot2)
#plot of the estimates
ggplot(td, aes(lambda, estimate, color = term)) + geom_line()
# plot of GCV versus lambda
ggplot(td, aes(lambda, GCV)) + geom_line() +
geom_vline(xintercept = g$lambdaGCV, col = "red", lty = 2)
#other data output method
library(broom)
g = glance(ridgereg)
g
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#other data output method
library(broom)
td = tidy(ridgereg)
g = glance(ridgereg)
g
#fancy plotting
library(ggplot2)
#plot of the estimates
ggplot(td, aes(lambda, estimate, color = term)) + geom_line()
# plot of GCV versus lambda
ggplot(td, aes(lambda, GCV)) + geom_line() +
geom_vline(xintercept = g$lambdaGCV, col = "red", lty = 2)
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#fancy plotting
library(ggplot2)
#plot of the estimates
ggplot(td, aes(lambda, estimate, color = term)) + geom_line()
# plot of GCV versus lambda
ggplot(td, aes(lambda, GCV)) + geom_line() +
geom_vline(xintercept = g$lambdaGCV, col = "red", lty = 2)
#other data output method
library(broom)
td = tidy(ridgereg)
g = glance(ridgereg)
g
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#fancy plotting
library(ggplot2)
#plot of the estimates
ggplot(td, main = Lambda, aes(lambda, estimate, color = term)) + geom_line()
# plot of GCV versus lambda
ggplot(td, aes(lambda, GCV)) + geom_line() +
geom_vline(xintercept = g$lambdaGCV, col = "red", lty = 2)
#other data output method
library(broom)
td = tidy(ridgereg)
g = glance(ridgereg)
g
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#fancy plotting
library(ggplot2)
#plot of the estimates
ggplot(td, ggtitle("Plot of length \n by dose"), aes(lambda, estimate, color = term)) + geom_line()
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#fancy plotting
library(ggplot2)
#plot of the estimates
ggplot(td, aes(lambda, estimate, color = term)) + geom_line() + ggtitle("Plot of length \n by dose")
# plot of GCV versus lambda
ggplot(td, aes(lambda, GCV)) + geom_line() +
geom_vline(xintercept = g$lambdaGCV, col = "red", lty = 2)
#other data output method
library(broom)
td = tidy(ridgereg)
g = glance(ridgereg)
g
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#fancy plotting
library(ggplot2)
#plot of the estimates
ggplot(td, aes(lambda, estimate, color = term)) + geom_line() + ggtitle("Ridge plot for lambda of 0.01 to 1.0")
# plot of GCV versus lambda
ggplot(td, aes(lambda, GCV)) + geom_line() +
geom_vline(xintercept = g$lambdaGCV, col = "red", lty = 2)
#other data output method
library(broom)
td = tidy(ridgereg)
g = glance(ridgereg)
g
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#fancy plotting
library(ggplot2)
#plot of the estimates
ggplot(td, aes(lambda, estimate, color = term)) + geom_line() + ggtitle("Ridge plot for lambda of 0.01 to 1.0") + theme(plot.title = element_text(hjust = 0.5))
# plot of GCV versus lambda
ggplot(td, aes(lambda, GCV)) + geom_line() +
geom_vline(xintercept = g$lambdaGCV, col = "red", lty = 2)
#other data output method
library(broom)
td = tidy(ridgereg)
g = glance(ridgereg)
g
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#fancy plotting
library(ggplot2)
#plot of the estimates
ggplot(td, aes(lambda, estimate, color = term)) + geom_line() + ggtitle("Ridge plot for lambda of 0.01 to 1.0") + theme(plot.title = element_text(hjust = 0.5))
# plot of GCV versus lambda
ggplot(td, aes(lambda, GCV)) + geom_line() + geom_vline(xintercept = g$lambdaGCV, col = "red", lty = 2) + ggtitle("Plot of GCV versus lambda") + theme(plot.title = element_text(hjust = 0.5))
#other data output method
library(broom)
td = tidy(ridgereg)
g = glance(ridgereg)
g
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates + Calcium
+ gender, data = mydata, lambda = seq(0.01,0.1,0.01))
td = tidy(ridgereg)
#fancy plotting
library(ggplot2)
#plot of the estimates
ggplot(td, aes(lambda, estimate, color = term)) + geom_line() + ggtitle("Ridge plot for lambda of 0.01 to 1.0") + theme(plot.title = element_text(hjust = 0.5))
# plot of GCV versus lambda
ggplot(td, aes(lambda, GCV)) + geom_line() + geom_vline(xintercept = g$lambdaGCV, col = "red", lty = 2) + ggtitle("Plot of GCV versus lambda") + theme(plot.title = element_text(hjust = 0.5))
#other data output method
library(broom)
g = glance(ridgereg)
g
#plot of residual vs fitted and observed values
par(mfrow=c(1,2))
plot(fit$fitted, fit$res)
plot(mydata$Calories, fit$res)
library(lmtest)
#breusch pagan test
bptest(mydata$Calories)
#package needed to generate correlated predictors
library(MASS)
#first ridge using library (MASS)
ridgereg = lm.ridge(Calories ~ Weight.lbs + Height.Inches + Protein + Carbohydrates +
Calcium + gender, data = mydata, lambda = seq(0.01,0.1,0.01))
#other data output method
library(broom)
td = tidy(ridgereg)
g = glance(ridgereg)
g
#fancy plotting
library(ggplot2)
par(mfrow=c(1,2))
#plot of the estimates
ggplot(td, aes(lambda, estimate, color = term)) + geom_line() +
ggtitle("Ridge plot for lambda of 0.01 to 1.0") +
theme(plot.title = element_text(hjust = 0.5))
# plot of GCV versus lambda
ggplot(td, aes(lambda, GCV)) + geom_line() +
geom_vline(xintercept = g$lambdaGCV, col = "red", lty = 2) +
ggtitle("Plot of GCV versus lambda") + theme(plot.title = element_text(hjust = 0.5))
